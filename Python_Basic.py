# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.


"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# 자료형: 리스트, 딕셔너리

la = ['숭실대학교', '서울시 동작구 상도동'] # 리스트

la[0]

la.index('숭실대학교')

# 원소 추가
la.append('02-828-0000')

# 원소 삭제
del la[2]

# 리스트 슬라이싱
la[0:2]

# 원소의 개수
len(la)

npl = np.random.rand(10)*10 # 랜덤한 숫자 출력, 숫자와 관련된 numpy

# 형변환 : int(),Array이지만 List와 데이터 타입이 유사하기 때문에 일반적으로 사용법 동일
mapl = list(map(int, npl)) # map()만 출력하면 메모리 주소 값이 나오기 때문에 list()로 변환
mapl

# 각각 원소의 개수
for n in range(10):
  c = mapl.count(n)
  print("%d: %d" %(n, c))

dic = {'a' : 1, 'b' : 10, 'c' : 11, 'd' : 13} # 딕셔너리, keys:values
type(dic)

dic['a'] # 인덱스가 없기 때문에 키 값으로 참조

# list → apppend
dic['e'] = 12

# 삭제는 리스트와 동일
del dic['e']

dic

kdic = dic.keys()
kdicl = list(kdic)

kdicl[0]

# 판다스, 규칙성을 찾아 이해와 많은 연습
file_path = "/content/drive/MyDrive/ColabNotebooks/gapminder.tsv"

df = pd.read_csv(file_path, sep="\t")
df

type(df['country']) # 열 단위 추출, 시리즈

type(df[['country']]) # [[]] 데이터 프레임

# 원하는 열 추출하기 위해서는 슬라이싱
df[['country','year']][0:10].head()

df.info()

df.isnull().sum() # 결측치 확인

# 행 단위 추출
df.loc[[1,2],['country','year']]

df.loc[[1,2]]

# 행 단위 슬라이싱, 슬라이싱 자체가 데이터 프레임
df.loc[0:10,['country','year']] # 데이터 프레임은 이름으로 슬라이싱

df.loc[0:10, 'country':'year'] # 열도 슬라이싱 가능

listT = [n for n in range(10)]

listT[1:5] # Index Number

df.iloc[1:5, 0:4] # 리스트 슬라이싱과 동일, Index Number

# 특정 값만 추출
df['country'].unique()

df['country'] == 'Korea, Rep.' # Boolean

df[df['country']=='Korea, Rep.'] # df[:] 동일

df[['country','year']][df['country']=='Korea, Rep.'] # 열을 추출하고 싶으면 앞에 열 값 대입

# 더 간단하게 하기 위해서는?
df_k = df[df['country']=='Korea, Rep.']
df_k

df_k[['year','lifeExp']]

df['country'].nunique() # 유니크한 값의 개수

df['country'].value_counts()

# Group By
df['continent'].unique()

# 대륙 별 기대 수명은 어떨까?
# continent = 행, lifeExp = 열
# 평균 값이 필요
# → Group By

df.groupby('continent')['lifeExp','pop'].mean() # 열 두 개 적용시 데이터 프레임으로 자동 변환

df.groupby(['continent','country'])['country'].nunique()

df.groupby(['continent','country'])['country'].value_counts()

df2 = df.groupby('country')['lifeExp'].agg(['mean','median']) # 집계
df2

df2.reset_index(inplace=True)

df2

df2.set_index('country',inplace=True)

df2

df2[['median']]*10

def m10(x):
  return x*10

df2

df2[['median']].apply(m10) # 함수 적용